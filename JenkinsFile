pipeline {
    agent {
      docker {
        image 'abhishekf5/maven-abhishek-docker-agent:v1'
        args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
      }
    }
    environment {
        GIT_REPO = 'https://github.com/thedevops-mohi/java-app.git'
        BRANCH_NAME = 'main'
        SONARQUBE_SERVER = 'http://192.168.0.25:9000'
        SONARQUBE_TOKEN = credentials('sonarqube-token')
        DOCKER_HUB_REPO = 'auwalu5/java_app'
        DOCKER_HUB_CREDENTIALS = credentials('DOCKER_HUB_CREDENTIALS')
        DOCKER_IMAGE_TAG = 'v1'
    }
    stages {
        stage('Checkout Code') {
            steps {
                git branch: "${BRANCH_NAME}", url: "${GIT_REPO}"
            }
        }
        stage('Build and Test') {
            steps {
                sh 'mvn clean install'
            }
        }
        stage('Static Code Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh "mvn sonar:sonar -Dsonar.host.url=${SONARQUBE_SERVER} -Dsonar.login=${SONARQUBE_TOKEN}"
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                   def dockerImage = docker.build("${DOCKER_HUB_REPO}:${DOCKER_IMAGE_TAG}")
                }
            }
        }

       stage('Push Docker Image') {
            steps {
                script {
                    // Log in to Docker Hub
                    withCredentials([usernamePassword(credentialsId: 'DOCKER_HUB_CREDENTIALS', usernameVariable: 'dockerhub_username', passwordVariable: 'dockerhub_password')]) {
                        sh 'echo $dockerhub_password | docker login -u $dockerhub_username --password-stdin'
                    }

                    // Push the Docker image to Docker Hub
                    sh "docker push ${DOCKER_HUB_REPO}:${DOCKER_IMAGE_TAG}"
                }
            }
        }

    }
}
